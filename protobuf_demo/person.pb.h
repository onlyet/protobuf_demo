// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef PROTOBUF_INCLUDED_person_2eproto
#define PROTOBUF_INCLUDED_person_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_person_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_person_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_person_2eproto();
namespace tutorial {
class COntrolMsg;
class COntrolMsgDefaultTypeInternal;
extern COntrolMsgDefaultTypeInternal _COntrolMsg_default_instance_;
class ControlMsg;
class ControlMsgDefaultTypeInternal;
extern ControlMsgDefaultTypeInternal _ControlMsg_default_instance_;
class PcbtEndExam;
class PcbtEndExamDefaultTypeInternal;
extern PcbtEndExamDefaultTypeInternal _PcbtEndExam_default_instance_;
class PcbtRegister;
class PcbtRegisterDefaultTypeInternal;
extern PcbtRegisterDefaultTypeInternal _PcbtRegister_default_instance_;
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
}  // namespace tutorial
namespace google {
namespace protobuf {
template<> ::tutorial::COntrolMsg* Arena::CreateMaybeMessage<::tutorial::COntrolMsg>(Arena*);
template<> ::tutorial::ControlMsg* Arena::CreateMaybeMessage<::tutorial::ControlMsg>(Arena*);
template<> ::tutorial::PcbtEndExam* Arena::CreateMaybeMessage<::tutorial::PcbtEndExam>(Arena*);
template<> ::tutorial::PcbtRegister* Arena::CreateMaybeMessage<::tutorial::PcbtRegister>(Arena*);
template<> ::tutorial::Person* Arena::CreateMaybeMessage<::tutorial::Person>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tutorial {

// ===================================================================

class Person final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(Person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Person* other);
  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string email = 3;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tutorial.Person)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// -------------------------------------------------------------------

class PcbtRegister final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.PcbtRegister) */ {
 public:
  PcbtRegister();
  virtual ~PcbtRegister();

  PcbtRegister(const PcbtRegister& from);

  inline PcbtRegister& operator=(const PcbtRegister& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PcbtRegister(PcbtRegister&& from) noexcept
    : PcbtRegister() {
    *this = ::std::move(from);
  }

  inline PcbtRegister& operator=(PcbtRegister&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PcbtRegister& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PcbtRegister* internal_default_instance() {
    return reinterpret_cast<const PcbtRegister*>(
               &_PcbtRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PcbtRegister* other);
  friend void swap(PcbtRegister& a, PcbtRegister& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PcbtRegister* New() const final {
    return CreateMaybeMessage<PcbtRegister>(nullptr);
  }

  PcbtRegister* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PcbtRegister>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PcbtRegister& from);
  void MergeFrom(const PcbtRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PcbtRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string examTimeIdString = 1;
  void clear_examtimeidstring();
  static const int kExamTimeIdStringFieldNumber = 1;
  const ::std::string& examtimeidstring() const;
  void set_examtimeidstring(const ::std::string& value);
  #if LANG_CXX11
  void set_examtimeidstring(::std::string&& value);
  #endif
  void set_examtimeidstring(const char* value);
  void set_examtimeidstring(const char* value, size_t size);
  ::std::string* mutable_examtimeidstring();
  ::std::string* release_examtimeidstring();
  void set_allocated_examtimeidstring(::std::string* examtimeidstring);

  // @@protoc_insertion_point(class_scope:tutorial.PcbtRegister)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr examtimeidstring_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// -------------------------------------------------------------------

class PcbtEndExam final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.PcbtEndExam) */ {
 public:
  PcbtEndExam();
  virtual ~PcbtEndExam();

  PcbtEndExam(const PcbtEndExam& from);

  inline PcbtEndExam& operator=(const PcbtEndExam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PcbtEndExam(PcbtEndExam&& from) noexcept
    : PcbtEndExam() {
    *this = ::std::move(from);
  }

  inline PcbtEndExam& operator=(PcbtEndExam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PcbtEndExam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PcbtEndExam* internal_default_instance() {
    return reinterpret_cast<const PcbtEndExam*>(
               &_PcbtEndExam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PcbtEndExam* other);
  friend void swap(PcbtEndExam& a, PcbtEndExam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PcbtEndExam* New() const final {
    return CreateMaybeMessage<PcbtEndExam>(nullptr);
  }

  PcbtEndExam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PcbtEndExam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PcbtEndExam& from);
  void MergeFrom(const PcbtEndExam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PcbtEndExam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userIdString = 2;
  void clear_useridstring();
  static const int kUserIdStringFieldNumber = 2;
  const ::std::string& useridstring() const;
  void set_useridstring(const ::std::string& value);
  #if LANG_CXX11
  void set_useridstring(::std::string&& value);
  #endif
  void set_useridstring(const char* value);
  void set_useridstring(const char* value, size_t size);
  ::std::string* mutable_useridstring();
  ::std::string* release_useridstring();
  void set_allocated_useridstring(::std::string* useridstring);

  // uint32 orderNum = 1;
  void clear_ordernum();
  static const int kOrderNumFieldNumber = 1;
  ::google::protobuf::uint32 ordernum() const;
  void set_ordernum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tutorial.PcbtEndExam)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr useridstring_;
  ::google::protobuf::uint32 ordernum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// -------------------------------------------------------------------

class COntrolMsg final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.COntrolMsg) */ {
 public:
  COntrolMsg();
  virtual ~COntrolMsg();

  COntrolMsg(const COntrolMsg& from);

  inline COntrolMsg& operator=(const COntrolMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  COntrolMsg(COntrolMsg&& from) noexcept
    : COntrolMsg() {
    *this = ::std::move(from);
  }

  inline COntrolMsg& operator=(COntrolMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const COntrolMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const COntrolMsg* internal_default_instance() {
    return reinterpret_cast<const COntrolMsg*>(
               &_COntrolMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(COntrolMsg* other);
  friend void swap(COntrolMsg& a, COntrolMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline COntrolMsg* New() const final {
    return CreateMaybeMessage<COntrolMsg>(nullptr);
  }

  COntrolMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<COntrolMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const COntrolMsg& from);
  void MergeFrom(const COntrolMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(COntrolMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:tutorial.COntrolMsg)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// -------------------------------------------------------------------

class ControlMsg final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.ControlMsg) */ {
 public:
  ControlMsg();
  virtual ~ControlMsg();

  ControlMsg(const ControlMsg& from);

  inline ControlMsg& operator=(const ControlMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ControlMsg(ControlMsg&& from) noexcept
    : ControlMsg() {
    *this = ::std::move(from);
  }

  inline ControlMsg& operator=(ControlMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ControlMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlMsg* internal_default_instance() {
    return reinterpret_cast<const ControlMsg*>(
               &_ControlMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ControlMsg* other);
  friend void swap(ControlMsg& a, ControlMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ControlMsg* New() const final {
    return CreateMaybeMessage<ControlMsg>(nullptr);
  }

  ControlMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ControlMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ControlMsg& from);
  void MergeFrom(const ControlMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // .tutorial.PcbtEndExam endExam = 2;
  bool has_endexam() const;
  void clear_endexam();
  static const int kEndExamFieldNumber = 2;
  const ::tutorial::PcbtEndExam& endexam() const;
  ::tutorial::PcbtEndExam* release_endexam();
  ::tutorial::PcbtEndExam* mutable_endexam();
  void set_allocated_endexam(::tutorial::PcbtEndExam* endexam);

  // @@protoc_insertion_point(class_scope:tutorial.ControlMsg)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::tutorial::PcbtEndExam* endexam_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Person

// int32 id = 1;
inline void Person::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Person::id() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.id)
  return id_;
}
inline void Person::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.id)
}

// string name = 2;
inline void Person::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.name)
  return name_.GetNoArena();
}
inline void Person::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Person.name)
}
#if LANG_CXX11
inline void Person::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Person.name)
}
#endif
inline void Person::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Person.name)
}
inline void Person::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Person.name)
}
inline ::std::string* Person::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Person.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:tutorial.Person.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Person.name)
}

// string email = 3;
inline void Person::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::email() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.email)
  return email_.GetNoArena();
}
inline void Person::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Person.email)
}
#if LANG_CXX11
inline void Person::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Person.email)
}
#endif
inline void Person::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Person.email)
}
inline void Person::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Person.email)
}
inline ::std::string* Person::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.Person.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_email() {
  // @@protoc_insertion_point(field_release:tutorial.Person.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_email(::std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Person.email)
}

// -------------------------------------------------------------------

// PcbtRegister

// string examTimeIdString = 1;
inline void PcbtRegister::clear_examtimeidstring() {
  examtimeidstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PcbtRegister::examtimeidstring() const {
  // @@protoc_insertion_point(field_get:tutorial.PcbtRegister.examTimeIdString)
  return examtimeidstring_.GetNoArena();
}
inline void PcbtRegister::set_examtimeidstring(const ::std::string& value) {
  
  examtimeidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.PcbtRegister.examTimeIdString)
}
#if LANG_CXX11
inline void PcbtRegister::set_examtimeidstring(::std::string&& value) {
  
  examtimeidstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.PcbtRegister.examTimeIdString)
}
#endif
inline void PcbtRegister::set_examtimeidstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  examtimeidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.PcbtRegister.examTimeIdString)
}
inline void PcbtRegister::set_examtimeidstring(const char* value, size_t size) {
  
  examtimeidstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.PcbtRegister.examTimeIdString)
}
inline ::std::string* PcbtRegister::mutable_examtimeidstring() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.PcbtRegister.examTimeIdString)
  return examtimeidstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PcbtRegister::release_examtimeidstring() {
  // @@protoc_insertion_point(field_release:tutorial.PcbtRegister.examTimeIdString)
  
  return examtimeidstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PcbtRegister::set_allocated_examtimeidstring(::std::string* examtimeidstring) {
  if (examtimeidstring != nullptr) {
    
  } else {
    
  }
  examtimeidstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), examtimeidstring);
  // @@protoc_insertion_point(field_set_allocated:tutorial.PcbtRegister.examTimeIdString)
}

// -------------------------------------------------------------------

// PcbtEndExam

// uint32 orderNum = 1;
inline void PcbtEndExam::clear_ordernum() {
  ordernum_ = 0u;
}
inline ::google::protobuf::uint32 PcbtEndExam::ordernum() const {
  // @@protoc_insertion_point(field_get:tutorial.PcbtEndExam.orderNum)
  return ordernum_;
}
inline void PcbtEndExam::set_ordernum(::google::protobuf::uint32 value) {
  
  ordernum_ = value;
  // @@protoc_insertion_point(field_set:tutorial.PcbtEndExam.orderNum)
}

// string userIdString = 2;
inline void PcbtEndExam::clear_useridstring() {
  useridstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PcbtEndExam::useridstring() const {
  // @@protoc_insertion_point(field_get:tutorial.PcbtEndExam.userIdString)
  return useridstring_.GetNoArena();
}
inline void PcbtEndExam::set_useridstring(const ::std::string& value) {
  
  useridstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.PcbtEndExam.userIdString)
}
#if LANG_CXX11
inline void PcbtEndExam::set_useridstring(::std::string&& value) {
  
  useridstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.PcbtEndExam.userIdString)
}
#endif
inline void PcbtEndExam::set_useridstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  useridstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.PcbtEndExam.userIdString)
}
inline void PcbtEndExam::set_useridstring(const char* value, size_t size) {
  
  useridstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.PcbtEndExam.userIdString)
}
inline ::std::string* PcbtEndExam::mutable_useridstring() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.PcbtEndExam.userIdString)
  return useridstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PcbtEndExam::release_useridstring() {
  // @@protoc_insertion_point(field_release:tutorial.PcbtEndExam.userIdString)
  
  return useridstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PcbtEndExam::set_allocated_useridstring(::std::string* useridstring) {
  if (useridstring != nullptr) {
    
  } else {
    
  }
  useridstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), useridstring);
  // @@protoc_insertion_point(field_set_allocated:tutorial.PcbtEndExam.userIdString)
}

// -------------------------------------------------------------------

// COntrolMsg

// string type = 1;
inline void COntrolMsg::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& COntrolMsg::type() const {
  // @@protoc_insertion_point(field_get:tutorial.COntrolMsg.type)
  return type_.GetNoArena();
}
inline void COntrolMsg::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.COntrolMsg.type)
}
#if LANG_CXX11
inline void COntrolMsg::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.COntrolMsg.type)
}
#endif
inline void COntrolMsg::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.COntrolMsg.type)
}
inline void COntrolMsg::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.COntrolMsg.type)
}
inline ::std::string* COntrolMsg::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.COntrolMsg.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* COntrolMsg::release_type() {
  // @@protoc_insertion_point(field_release:tutorial.COntrolMsg.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void COntrolMsg::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:tutorial.COntrolMsg.type)
}

// string data = 2;
inline void COntrolMsg::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& COntrolMsg::data() const {
  // @@protoc_insertion_point(field_get:tutorial.COntrolMsg.data)
  return data_.GetNoArena();
}
inline void COntrolMsg::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.COntrolMsg.data)
}
#if LANG_CXX11
inline void COntrolMsg::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.COntrolMsg.data)
}
#endif
inline void COntrolMsg::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.COntrolMsg.data)
}
inline void COntrolMsg::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.COntrolMsg.data)
}
inline ::std::string* COntrolMsg::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.COntrolMsg.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* COntrolMsg::release_data() {
  // @@protoc_insertion_point(field_release:tutorial.COntrolMsg.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void COntrolMsg::set_allocated_data(::std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:tutorial.COntrolMsg.data)
}

// -------------------------------------------------------------------

// ControlMsg

// string type = 1;
inline void ControlMsg::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ControlMsg::type() const {
  // @@protoc_insertion_point(field_get:tutorial.ControlMsg.type)
  return type_.GetNoArena();
}
inline void ControlMsg::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.ControlMsg.type)
}
#if LANG_CXX11
inline void ControlMsg::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.ControlMsg.type)
}
#endif
inline void ControlMsg::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.ControlMsg.type)
}
inline void ControlMsg::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.ControlMsg.type)
}
inline ::std::string* ControlMsg::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:tutorial.ControlMsg.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ControlMsg::release_type() {
  // @@protoc_insertion_point(field_release:tutorial.ControlMsg.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ControlMsg::set_allocated_type(::std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:tutorial.ControlMsg.type)
}

// .tutorial.PcbtEndExam endExam = 2;
inline bool ControlMsg::has_endexam() const {
  return this != internal_default_instance() && endexam_ != nullptr;
}
inline void ControlMsg::clear_endexam() {
  if (GetArenaNoVirtual() == nullptr && endexam_ != nullptr) {
    delete endexam_;
  }
  endexam_ = nullptr;
}
inline const ::tutorial::PcbtEndExam& ControlMsg::endexam() const {
  const ::tutorial::PcbtEndExam* p = endexam_;
  // @@protoc_insertion_point(field_get:tutorial.ControlMsg.endExam)
  return p != nullptr ? *p : *reinterpret_cast<const ::tutorial::PcbtEndExam*>(
      &::tutorial::_PcbtEndExam_default_instance_);
}
inline ::tutorial::PcbtEndExam* ControlMsg::release_endexam() {
  // @@protoc_insertion_point(field_release:tutorial.ControlMsg.endExam)
  
  ::tutorial::PcbtEndExam* temp = endexam_;
  endexam_ = nullptr;
  return temp;
}
inline ::tutorial::PcbtEndExam* ControlMsg::mutable_endexam() {
  
  if (endexam_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::PcbtEndExam>(GetArenaNoVirtual());
    endexam_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tutorial.ControlMsg.endExam)
  return endexam_;
}
inline void ControlMsg::set_allocated_endexam(::tutorial::PcbtEndExam* endexam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete endexam_;
  }
  if (endexam) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      endexam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, endexam, submessage_arena);
    }
    
  } else {
    
  }
  endexam_ = endexam;
  // @@protoc_insertion_point(field_set_allocated:tutorial.ControlMsg.endExam)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_person_2eproto
